"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
let protagonist = require('protagonist');
let validationBuiltins = ['min', 'required', 'max', 'range', 'string'];
const angular = require("./angular");
function convert(file) {
    return new Promise((resolve, reject) => {
        protagonist.parse(file, { type: 'ast' }, function (error, result) {
            if (error) {
                console.log(error);
                return;
            }
            parse(result.ast);
            json_schema_to_typescript_1.compile(schemas, 'MySchema')
                .then(ts => {
                let out = typescript_1.codegen(glue_ast);
                let ng = angular.codegen(glue_ast);
                console.log(out);
                resolve(out);
            })
                .catch(reject);
        });
    });
}
exports.convert = convert;
;
function parse(input) {
    if (input.element == 'object') {
        parseObject(input, '');
    }
    else if (input.element == 'resource') {
        parseResource(input);
    }
    else if (Array.isArray(input.content)) {
        input.content.forEach(elm => {
            elm.parent = input;
            parse(elm);
        });
    }
}
const json_schema_to_typescript_1 = require("json-schema-to-typescript");
let schemas = {
    definitions: {},
    allOf: []
};
let validators = {};
let handlers = {};
let guards = {};
const ast_1 = require("./ast");
const typescript_1 = require("./typescript");
let glue_ast = new ast_1.AST();
let i = 0;
function parseObject(input, routeName) {
    if (!input.meta) {
        input.meta = { id: routeName.split(/\s/g).map(capitalizeFirstLetter).join('') + 'Form' };
    }
    let obj = new ast_1.DataStructure(input.meta.id);
    let structName = input.meta.id.replace(/\s/g, '');
    let validations = [];
    if (!input.content) {
        console.error(input.meta.id, 'has no fields');
    }
    input.content.map(elm => {
        let key = elm.content.key.content;
        let type = elm.content.value.element;
        let typeName = type.replace(/\s/g, '');
        let prop = new ast_1.Property(key, type);
        obj.props.push(prop);
        let isRequired = false;
        if (elm.attributes && elm.attributes.typeAttributes.indexOf('required') != -1) {
            prop.required = true;
        }
        if (elm.meta) {
            let desc = elm.meta.description;
            if (desc) {
                let array = desc.split('(');
                if (array[1] && array[1].indexOf(')') != -1) {
                    array = array[1].split(')');
                    array = array[0].split(',');
                    array.forEach(val => {
                        val = val.trim();
                        let args = val.split(/\s/g);
                        let method = args[0];
                        args.shift();
                        prop.addValidation(method, ...args);
                        if (!glue_ast.data.validators.find(elm => elm.name == method)) {
                            glue_ast.data.validators.push({ name: method, args: args.map(getType) });
                        }
                    });
                }
            }
        }
    });
    glue_ast.data.objects.push(obj);
    return structName;
}
let routes = [];
function parseResource(input) {
    let category = input.parent.attributes.name || 'global';
    console.log(input);
    let route = routes.find(elm => elm.name == category);
    if (!route) {
        route = new ast_1.Route();
        route.name = category;
        if (input.name && input.name != category)
            route.name += input.name;
    }
    route.name = route.name.replace(/ /g, '');
    let basepath = input.uriTemplate;
    for (let action of input.actions) {
        let path = basepath;
        if (action.attributes && action.attributes.uriTemplate && path != action.attributes.uriTemplate) {
            path += action.attributes.uriTemplate;
        }
        let routeHandler = new ast_1.RouteHandler(action.name, action.method, path);
        route.handlers.push(routeHandler);
        let desc = action.description.split('\n')[0];
        let array = desc.split('(');
        let guardRun = '';
        if (array[1] && array[1].indexOf(')') != -1) {
            let guards = array[1].split(')')[0].split(',');
            for (let guard of guards) {
                let args = guard.split(/\s/g);
                let routeGuard = new ast_1.RouteGuard();
                routeGuard.name = args.shift();
                routeGuard.args = args;
                routeHandler.guards.push(routeGuard);
                if (!glue_ast.data.guards.find(elm => elm.name == routeGuard.name)) {
                    glue_ast.data.guards.push({ name: routeGuard.name, args: args.map(getType) });
                }
            }
        }
        if (action.examples && action.examples[0] && action.examples[0].requests && action.examples[0].requests[0]) {
            let request = action.examples[0].requests[0];
            if (request.content && request.content[0] && request.content[0].element == 'dataStructure') {
                let content = request.content[0].content[0];
                let type;
                if (content.element == 'object') {
                    type = parseObject(content, routeHandler.name);
                }
                else {
                    type = content.element.replace(/\s/g, '');
                }
                routeHandler.inputs = [{ name: 'arg0', type, kind: 'params' }];
            }
        }
    }
    glue_ast.data.routes.push(route);
}
function getType(input) {
    return isNumber(input) ? 'number' : 'string';
}
function isNumber(input) {
    return parseFloat(input).toString() == input.trim();
}
function isBasicType(input) {
    return ['string', 'number'].indexOf(input) != -1;
}
function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
}
//# sourceMappingURL=data:application/json;base64,